<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Support</name>
    </assembly>
    <members>
        <member name="T:SevenZip.LzmaBench">
            <summary>
            LZMA Benchmark
            </summary>
        </member>
        <member name="T:SevenZip.DataErrorException">
            <summary>
            The exception that is thrown when an error in input stream occurs during decoding.
            </summary>
        </member>
        <member name="T:SevenZip.InvalidParamException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range.
            </summary>
        </member>
        <member name="M:SevenZip.ICodeProgress.SetProgress(System.Int64,System.Int64)">
            <summary>
            Callback progress.
            </summary>
            <param name="inSize">
            input size. -1 if unknown.
            </param>
            <param name="outSize">
            output size. -1 if unknown.
            </param>
        </member>
        <member name="M:SevenZip.ICoder.Code(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64,SevenZip.ICodeProgress)">
            <summary>
            Codes streams.
            </summary>
            <param name="inStream">
            input Stream.
            </param>
            <param name="outStream">
            output Stream.
            </param>
            <param name="inSize">
            input Size. -1 if unknown.
            </param>
            <param name="outSize">
            output Size. -1 if unknown.
            </param>
            <param name="progress">
            callback progress reference.
            </param>
            <exception cref="T:SevenZip.DataErrorException">
            if input stream is not valid
            </exception>
        </member>
        <member name="T:SevenZip.CoderPropID">
            <summary>
            Provides the fields that represent properties idenitifiers for compressing.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DefaultProp">
            <summary>
            Specifies default property.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.DictionarySize">
            <summary>
            Specifies size of dictionary.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.UsedMemorySize">
            <summary>
            Specifies size of memory for PPM*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Order">
            <summary>
            Specifies order for PPM methods.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.BlockSize">
            <summary>
            Specifies Block Size.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.PosStateBits" -->
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.LitContextBits" -->
        <!-- Badly formed XML comment ignored for member "F:SevenZip.CoderPropID.LitPosBits" -->
        <member name="F:SevenZip.CoderPropID.NumFastBytes">
            <summary>
            Specifies number of fast bytes for LZ*.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinder">
            <summary>
            Specifies match finder. LZMA: "BT2", "BT4" or "BT4B".
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.MatchFinderCycles">
            <summary>
            Specifies the number of match finder cyckes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumPasses">
            <summary>
            Specifies number of passes.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.Algorithm">
            <summary>
            Specifies number of algorithm.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.NumThreads">
            <summary>
            Specifies the number of threads.
            </summary>
        </member>
        <member name="F:SevenZip.CoderPropID.EndMarker">
            <summary>
            Specifies mode with end marker.
            </summary>
        </member>
        <member name="T:LzmaAlone.Properties.Resources">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:LzmaAlone.Properties.Resources.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:LzmaAlone.Properties.Resources.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:PSupport.DLoger">
            <summary>
            
            </summary>
        </member>
        <member name="F:PSupport.DLoger.EnableLog">
            <summary>
            
            </summary>
        </member>
        <member name="F:PSupport.DLoger.msOnlyTags">
            <summary>
            
            </summary>
        </member>
        <member name="M:PSupport.DLoger.Log(System.Object,System.String)">
            <summary>
            输出到控制台
            </summary>
            <param name="message"></param>
            <param name="stag"></param>
        </member>
        <member name="M:PSupport.DLoger.Log(System.Object,UnityEngine.Object,System.String)">
            <summary>
            输出到控制台
            </summary>
            <param name="message"></param>
            <param name="context"></param>
            <param name="stag"></param>
        </member>
        <member name="M:PSupport.DLoger.LogError(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="stag"></param>
        </member>
        <member name="M:PSupport.DLoger.LogError(System.Object,UnityEngine.Object,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="context"></param>
            <param name="stag"></param>
        </member>
        <member name="M:PSupport.DLoger.LogWarning(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="stag"></param>
        </member>
        <member name="M:PSupport.DLoger.LogWarning(System.Object,UnityEngine.Object,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="context"></param>
            <param name="stag"></param>
        </member>
        <member name="T:PSupport.Encryption">
            <summary>
            加密解密类
            </summary>
        </member>
        <member name="M:PSupport.Encryption.Encrypt(System.Byte[])">
            <summary>
            加密
            </summary>
            <param name="inputbyts"></param>
            <returns></returns>
        </member>
        <member name="M:PSupport.Encryption.Decrypt(System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="inputbyts"></param>
            <returns></returns>
        </member>
        <member name="M:PSupport.LoadSystem.LoadAsset._releaseResLoop">
            <summary>
            每隔一定时间,释放资源
            </summary>
            <returns></returns>
        </member>
        <member name="F:PSupport.LoadSystem.LoadAsset._miloadingAssetNum">
            <summary>
            
            </summary>
        </member>
        <member name="T:PSupport.LoadSystem.ProcessDelegateArgc">
            <summary>
            回调函数的委托
            </summary>
            <param name="obj">回调参数</param>
            <param name="loadedNotify">加载结果</param>
        </member>
        <member name="T:PSupport.LoadSystem.ResourceLoadManager">
            <summary>
            资源加载管理器
            </summary>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.requestRes(System.String,PSupport.LoadSystem.ProcessDelegateArgc,System.Object,System.Boolean,System.String,System.Boolean)">
            <summary>
            在URLPath上读取类型为Object的资源,如果设置了URL和StreamingAssets,则会比较本地资源和服务器资源,如果本地和服务器一样则用本地的,如果不一样则用服务器的
            如果只设置了服务器则用服务器,如果只设置了本地则用本地
            请求资源,指定同步加载还是异步加载,如果已经加载成功,返回,如果正在加载返回空,如果没有加载,则同步或者异步加载,返回空,异步加载完毕,调用回调函数proc
            求情资源的类型,如果设置了类型,则getRes相应的资源时,也要带上请求时用的资源类型,默认都是Object,注意:在removeRes的时候,要对应创建时类型
            </summary>
            <param name="spath">路径</param>
            <param name="proc">加载结果回调</param>
            <param name="o">回调传递参数</param>
            <param name="basyn">解压是否异步</param>
            <param name="stag">资源tag</param>
            <param name="bloadfromfile">是否用loadfromfile方式加载</param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.requestRes(System.String,System.Type,PSupport.LoadSystem.ProcessDelegateArgc,System.Object,System.Boolean,System.String,System.Boolean)">
            <summary>
            在URLPath上读取类型为Object的资源,如果设置了URL和StreamingAssets,则会比较本地资源和服务器资源,如果本地和服务器一样则用本地的,如果不一样则用服务器的
            如果只设置了服务器则用服务器,如果只设置了本地则用本地
            请求资源,指定同步加载还是异步加载,如果已经加载成功,返回,如果正在加载返回空,如果没有加载,则同步或者异步加载,返回空,异步加载完毕,调用回调函数proc
            求情资源的类型,如果设置了类型,则getRes相应的资源时,也要带上请求时用的资源类型,默认都是Object,注意:在removeRes的时候,要对应创建时类型
            </summary>
            <param name="spath"></param>
            <param name="type">资源类型</param>
            <param name="proc"></param>
            <param name="o"></param>
            <param name="basyn">解压是否异步</param>
            <param name="stag">资源tag</param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.requestRes(System.String,PSupport.LoadSystem.eLoadResPath,PSupport.LoadSystem.ProcessDelegateArgc,System.Object,System.Boolean,System.String,System.Boolean)">
            <summary>
            在URLPath上读取类型为Object的资源,如果设置了URL和StreamingAssets,则会比较本地资源和服务器资源,如果本地和服务器一样则用本地的,如果不一样则用服务器的
            如果只设置了服务器则用服务器,如果只设置了本地则用本地
            请求资源,指定同步加载还是异步加载,如果已经加载成功,返回,如果正在加载返回空,如果没有加载,则同步或者异步加载,返回空,异步加载完毕,调用回调函数proc
            求情资源的类型,如果设置了类型,则getRes相应的资源时,也要带上请求时用的资源类型,默认都是Object,注意:在removeRes的时候,要对应创建时类型
            </summary>
            <param name="spath">资源路径名称数组(相对于Resources/),不要带扩展名</param>
            <param name="eloadResType">加载资源的路径类型,如果设置了Resources,是不受管理器mbuseassetbundle影响的</param>
            <param name="proc">加载完毕回调函数</param>
            <param name="o">回调函数的参数</param>
            <param name="basyn"> 解压是否异步</param>
            <param name="stag">资源tag</param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.requestRes(System.String[],PSupport.LoadSystem.eLoadResPath,PSupport.LoadSystem.ProcessDelegateArgc,System.Object,System.Boolean,System.Boolean)">
            <summary>
            在URLPath上读取类型为Object的资源,如果设置了URL和StreamingAssets,则会比较本地资源和服务器资源,如果本地和服务器一样则用本地的,如果不一样则用服务器的
            如果只设置了服务器则用服务器,如果只设置了本地则用本地
            请求资源,指定同步加载还是异步加载,如果已经加载成功,返回,如果正在加载返回空,如果没有加载,则同步或者异步加载,返回空,异步加载完毕,调用回调函数proc
            求情资源的类型,如果设置了类型,则getRes相应的资源时,也要带上请求时用的资源类型,默认都是Object,注意:在removeRes的时候,要对应创建时类型
            </summary>
            <param name="spaths">所有路径</param>
            <param name="eloadResType">加载资源的路径类型</param>
            <param name="proc">加载完毕回调函数</param>
            <param name="o">回调参数</param>
            <param name="basyn">解压是否异步</param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.requestRes(System.String[],System.Type,PSupport.LoadSystem.eLoadResPath,PSupport.LoadSystem.ProcessDelegateArgc,System.Object,System.Boolean,System.String,System.Boolean)">
            <summary>
            在URLPath上读取类型为Object的资源,如果设置了URL和StreamingAssets,则会比较本地资源和服务器资源,如果本地和服务器一样则用本地的,如果不一样则用服务器的
            如果只设置了服务器则用服务器,如果只设置了本地则用本地
            请求资源,指定同步加载还是异步加载,如果已经加载成功,返回,如果正在加载返回空,如果没有加载,则同步或者异步加载,返回空,异步加载完毕,调用回调函数proc
            求情资源的类型,如果设置了类型,则getRes相应的资源时,也要带上请求时用的资源类型,默认都是Object,注意:在removeRes的时候,要对应创建时类型
            </summary>
            <param name="spaths">所有路径</param>
            <param name="type">类型</param>
            <param name="eloadResType">加载资源的路径类型</param>
            <param name="stag">资源tag</param>
            <param name="proc">加载完毕回调函数</param>
            <param name="o">回调参数</param>
            <param name="basyn">解压是否异步</param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.requestDownloadBundle(System.String[],PSupport.LoadSystem.eLoadResPath,PSupport.LoadSystem.ProcessDelegateArgc,System.Object,System.Boolean,System.String)">
            <summary>
            加载某个bundle但是不加载依赖,一般作为更新包用
            </summary>
            <param name="spaths">所有路径</param>
            <param name="eloadResType">加载资源的路径类型</param>
            <param name="stag">资源tag</param>
            <param name="proc">加载完毕回调函数</param>
            <param name="o">回调参数</param>
            <param name="basyn">解压是否异步</param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.requestRes(System.String,System.Type,PSupport.LoadSystem.eLoadResPath,PSupport.LoadSystem.ProcessDelegateArgc,System.Object,System.Boolean,System.String,System.Boolean)">
            <summary>
            在URLPath上读取类型为Object的资源,如果设置了URL和StreamingAssets,则会比较本地资源和服务器资源,如果本地和服务器一样则用本地的,如果不一样则用服务器的
            如果只设置了服务器则用服务器,如果只设置了本地则用本地
            请求资源,指定同步加载还是异步加载,如果已经加载成功,返回,如果正在加载返回空,如果没有加载,则同步或者异步加载,返回空,异步加载完毕,调用回调函数proc
            求情资源的类型,如果设置了类型,则getRes相应的资源时,也要带上请求时用的资源类型,默认都是Object,注意:在removeRes的时候,要对应创建时类型
            </summary>
            <param name="spath"></param>
            <param name="type"></param>
            <param name="eloadResType"></param>
            <param name="stag">资源tag</param>
            <param name="proc"></param>
            <param name="o"></param>
            <param name="basyn">解压是否异步</param>
            
            <returns></returns>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.requestResNoAutoRelease(System.String,System.Type,PSupport.LoadSystem.eLoadResPath,PSupport.LoadSystem.ProcessDelegateArgc,System.Object,System.Boolean,System.Boolean)">
            <summary>
            读取的资源的bundle不会自动释放,要手动调用unloadNoAutoReleasebundle
            </summary>
            <param name="spath"></param>
            <param name="type"></param>
            <param name="eloadResType"></param>
            <param name="proc"></param>
            <param name="o"></param>
            <param name="basyn"></param>
            <param name="stag">资源tag</param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.requestResNoAutoRelease(System.String[],System.Type,PSupport.LoadSystem.eLoadResPath,PSupport.LoadSystem.ProcessDelegateArgc,System.Object,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="spaths"></param>
            <param name="type"></param>
            <param name="eloadResType"></param>
            <param name="proc"></param>
            <param name="o"></param>
            <param name="basyn"></param>
            <param name="bloadfromfile"></param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager._addNoAutoReleaseBundlePath(System.String)">
            <summary>
            加入不自动释放列表
            </summary>
            <param name="inputbundpath"></param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.unloadNoAutoRelease(System.String,System.Type,PSupport.LoadSystem.eLoadResPath)">
            <summary>
            释放对应调用requestResNoAutoRelease的资源
            </summary>
            <param name="respath"></param>
            <param name="type"></param>
            <param name="eloadResType"></param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.requestRes(System.String[],System.Type[],PSupport.LoadSystem.eLoadResPath,PSupport.LoadSystem.ProcessDelegateArgc,System.Object,System.Boolean,System.String,System.Boolean)">
            <summary>
            在URLPath上读取类型为Object的资源,如果设置了URL和StreamingAssets,则会比较本地资源和服务器资源,如果本地和服务器一样则用本地的,如果不一样则用服务器的
            如果只设置了服务器则用服务器,如果只设置了本地则用本地
            请求资源,指定同步加载还是异步加载,如果已经加载成功,返回,如果正在加载返回空,如果没有加载,则同步或者异步加载,返回空,异步加载完毕,调用回调函数proc
            求情资源的类型,如果设置了类型,则getRes相应的资源时,也要带上请求时用的资源类型,默认都是Object,注意:在removeRes的时候,要对应创建时类型
            </summary>
            <param name="spaths">所有路径</param>
            <param name="types">所有路径对应的类型</param>
            <param name="eloadResType">加载资源的路径类型</param>
            <param name="proc">加载完毕回调函数</param>
            <param name="o">回调参数</param>
            <param name="basyn">解压是否异步</param>
            <param name="stag">资源tag</param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.requestRes(System.String[],System.Type[],PSupport.LoadSystem.eLoadResPath[],System.String[],PSupport.LoadSystem.ProcessDelegateArgc,System.Object,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="spaths"></param>
            <param name="types"></param>
            <param name="eloadResTypes"></param>
            <param name="stags"></param>
            <param name="proc"></param>
            <param name="o"></param>
            <param name="basyn"></param>
            <param name="bloadfromfile"></param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.updateToLatestBundles(PSupport.LoadSystem.ProcessDelegateArgc,System.String[])">
            <summary>
            更新服务器上最新的资源
            </summary>
            <param name="loadedproc">回调函数</param>
            <param name="updateOnlyPack">这里的资源包只做更新,不做初始化下载,就是说,除非本地已经下载过这个包,才会参与包更新,如果本地没有这个包,这不会去下载</param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.doSceneObjectAssetsRef(System.String)">
            <summary>
            处理当前场景物体的引用资源
            </summary>
            <param name="sScenePath"></param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager._getStreamingAssetsNameByLoadStyle(PSupport.LoadSystem.eLoadResPath)">
            <summary>
            获得Manifest的bundle的名字,URL上的名字和本地的名字不能重名
            </summary>
            <param name="eloadrespath"></param>
            <returns></returns>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager._makeRefAssetsConfig">
            <summary>
            根据资源引用表,生成配置
            </summary>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.getRes(System.String,System.Type,PSupport.LoadSystem.eLoadResPath)">
            <summary>
            获得已经加ResourcesManager.request加载完毕的对象
            </summary>
            <param name="respath">路径</param>
            <param name="type">类型</param>
            <param name="eloadResType">加载资源的路径类型</param>
            <returns></returns>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.getRes(System.String,PSupport.LoadSystem.eLoadResPath)">
            <summary>
            获得已经加ResourcesManager.request加载完毕的对象
            </summary>
            <param name="respath">路径</param>
            <param name="eloadResType">加载资源的路径类型</param>
            <returns></returns>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.getResTag(System.String,System.Type,PSupport.LoadSystem.eLoadResPath)">
            <summary>
            获取某个资源的tag
            </summary>
            <param name="respath"></param>
            <param name="type"></param>
            <param name="eloadResType"></param>
            <returns></returns>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.setResTag(System.String,System.Type,PSupport.LoadSystem.eLoadResPath,System.String)">
            <summary>
            设置存在资源的tag
            </summary>
            <param name="respath"></param>
            <param name="type"></param>
            <param name="eloadResType"></param>
            <param name="tag"></param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.checkBundleReleased">
            <summary>
            检查非常住bundle是否都释放完毕
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.clearAllRes(System.String)">
            <summary>
            清除标记为tag的资源
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.clearAllDefaultRes">
            <summary>
            清除默认tag
            </summary>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.reset">
            <summary>
            重置所有设置
            </summary>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.startUnloadUnusedAssetAndGC">
            <summary>
            开始执行卸载冗余资源和GC
            </summary>
            <returns></returns>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.isUnloadUnusedAssetAndGCDone">
            <summary>
            判断卸载冗余资源和GC是否执行完毕
            </summary>
            <returns></returns>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.closeURL(System.Boolean)">
            <summary>
            清除关于远程下载的信息,使得程序都从包里读取
            </summary>
            <returns></returns>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager._beginUnloadUnUsedAssets">
            <summary>
            标记可以开始做资源卸载
            </summary>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager._getResObject(System.String)">
            <summary>
            返回加载对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.removeRes(System.String,PSupport.LoadSystem.eLoadResPath)">
            <summary>
            移除资源
            </summary>
            <param name="respath">资源路径</param>
            <param name="eloadResType">加载资源的路径类型</param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.removeRes``1(System.String,PSupport.LoadSystem.eLoadResPath)">
            <summary>
            移除资源
            </summary>
            <typeparam name="T"></typeparam>
            <param name="respath"></param>
            <param name="eloadResType">加载资源的路径类型</param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager._removeRes(System.String,System.Boolean)">
            <summary>
            移除资源,专门在LoadAsset里面移除bundle用
            </summary>
            <param name="sReskey"></param>
            <param name="bunloadUnusedAssets"></param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.removeRes(System.String,System.Type,PSupport.LoadSystem.eLoadResPath)">
            <summary>
            移除资源
            </summary>
            <param name="respath"></param>
            <param name="type"></param>
            <param name="eloadResType"></param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager.tool_Printinfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager._addResAndRemoveInLoadingList(System.String,UnityEngine.Object,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="skey"></param>
            <param name="t"></param>
            <param name="tag"></param>
            <param name="sRequestPath"></param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager._doWithAssetRefToObject(UnityEngine.Object,System.String)">
             <summary>
            由于释放bundle后,引用的资源会脱离管理,再次加载bundle,加载出来的资源,会在内存生成新的拷贝,所以这里做资源的管理和计数,
            避免同一份资源在内存中多份
             </summary>
             <param name="o"></param>
             <param name="sobjkey">在资源引用配置里面的key值</param>
        </member>
        <member name="M:PSupport.LoadSystem.ResourceLoadManager._isLoadedRes(System.String)">
            <summary>
            是否是已经加载完毕的资源
            </summary>
            <param name="skey">(sAssetPath + type.ToString())</param>
            <returns></returns>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.mbuseassetbundle">
            <summary>
            是否读取打包资源
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.mResourcesURLAddress">
            <summary>
            指定资源的网络路径
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.mResourceStreamingAssets">
            <summary>
            指定资源的网络路径
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.mResourceStreamingAssetsForWWW">
            <summary>
            指定资源的网络路径,WWW读取的
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.msCachingPath">
            <summary>
            caching文件夹
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.mBAutoRelease">
            <summary>
            是否开启自动释放
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager._mbNotDownLoad">
            <summary>
            是否从远程下载资源
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.mbEditorMode">
            <summary>
            是否是编辑器模式,编辑器模式下设置true,防止在内存清理的时候,误删除掉本地资源prefab
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager._mlistRefObjForDebug">
            <summary>
            用来存储上次输出的资源缓存信息,用来着对比输出
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.mBundlesInfoFileName">
            <summary>
            设定记录bundle信息的文件名
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.mSdefaultTag">
            <summary>
            默认资源标志
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.msNoAutoRelease">
            <summary>
            不自动释放资源标志
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager._mfLastReleaseBundleTime">
            <summary>
            记录清楚bundle时间
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager._mfMAXReleaseBundleTime">
            <summary>
            释放bundle的间隔
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.miMaxLoadAssetsNum">
            <summary>
            同时加载asset的最大数量
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.mbLoadAssetWait">
            <summary>
            是否加载完asset等待(同步加载会卡进程,导致回调不能返回)
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.mfuncDllLoadFailed">
            <summary>
            
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager._mURLAssetBundleManifest">
            <summary>
            AssetBundleManifest对象
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager._mDicLoadedBundle">
            <summary>
            记录已经加载的bundle
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager._mListLoadingBundle">
            <summary>
            记录正在加载的bundle
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager._mListNoAutoReleaseBundle">
            <summary>
            不自动释放的请求的bundle路径
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.mDicDownloadingBundleBytes">
            <summary>
            记录每个bundle的下载进度
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.mbUnLoadUnUsedResDone">
            <summary>
            返回是否清理无用资源结束
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager.mbStartDoUnload">
            <summary>
            释放资源的协程返回
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager._mDicBundlescounts">
            <summary>
            记录bundle的引用和计数
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager._mDicAssetRef">
            <summary>
            记录资源引用的Dic,每隔一段时间,都会删除资源中引用计数为0的资源
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager._mListReleasedObjects">
            <summary>
            放置需要销毁的资源,每隔一段时间都会遍历该列表,销毁资源
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager._mSetRemovedObjects">
            <summary>
            放置需要销毁的Object,当非常住bundle释放完毕,最终释放这些Object
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.ResourceLoadManager._mDicAssetsRefConfig">
            <summary>
            记录每个预制件所依赖资源的路径
            </summary>
        </member>
        <member name="T:PSupport.LoadSystem.eLoadedNotify">
            <summary>
            加载结果
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.eLoadedNotify.Load_Failed">
            <summary>
            加载失败
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.eLoadedNotify.Load_OneSuccessfull">
            <summary>
            加载一个成功
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.eLoadedNotify.Load_Successfull">
            <summary>
            加载全部完成
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.eLoadedNotify.Load_NotTotleSuccessfull">
            <summary>
            加载全部完成
            </summary>
        </member>
        <member name="T:PSupport.LoadSystem.eLoadResPath">
            <summary>
            枚举3种读取资源的来源
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.eLoadResPath.RP_Resources">
            <summary>
            读取Resources下的资源
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.eLoadResPath.RP_StreamingAssets">
            <summary>
            读取本地StreamingAssets下的资源
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.eLoadResPath.RP_URL">
            <summary>
            读取网络路径,没有就从读取本地StreamingAssets下的资源里读取
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.eLoadResPath.RP_Caching">
            <summary>
            优先Caching,没有就从读取本地StreamingAssets下的资源里读取
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.eLoadResPath.RP_Unknow">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.eLoadResPathState.LS_ReadURLOnly">
            <summary>
            只读取URL的资源
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.eLoadResPathState.LS_ReadStreamingOnly">
            <summary>
            只读取StreamingAssets的资源
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.eLoadResPathState.LS_ReadURLForUpdate">
            <summary>
            优先读取URL的资源
            </summary>
        </member>
        <member name="F:PSupport.LoadSystem.eLoadResPathState.LS_EmptyAddress">
            <summary>
            没有配置资源路径
            </summary>
        </member>
        <member name="T:PSupport.SingleMono">
            <summary>
            
            </summary>
        </member>
        <member name="P:PSupport.SingleMono.IsDestroying">
            <summary>
            
            </summary>
        </member>
        <member name="M:PSupport.SingleMono.IsCreatedInstance(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:PSupport.SingleMono.getInstance``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:PSupport.SingleMono.RemoveInstance(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
        </member>
        <member name="T:GameMainDll">
            <summary>
            
            </summary>
        </member>
        <member name="M:GameMainDll.getScriptType(System.String)">
            <summary>
            获取链接库中脚本类型
            </summary>
            <param name="sScriptName">脚本名字</param>
            <returns></returns>
        </member>
    </members>
</doc>
